from aredis_om.model import NotFoundError

from mihama import models

from .mixins.search import CRUDVulnerabilitySearchMixin


class CRUDVulnerability(CRUDVulnerabilitySearchMixin):
    async def get_by_id(self, id: str) -> models.Vulnerability | None:
        try:
            return await models.Vulnerability.find(
                models.Vulnerability.id == id
            ).first()
        except NotFoundError:
            return None

    async def update(
        self, db_obj: models.Vulnerability, **field_values
    ) -> models.Vulnerability:
        # remove PK from values to prevent duplicated data
        if "pk" in field_values:
            field_values.pop("pk")

        return await db_obj.update(**field_values)

    async def save(self, db_obj: models.Vulnerability) -> models.Vulnerability:
        return await db_obj.save()

    async def delete(self, db_obj: models.Vulnerability):
        return await db_obj.delete(db_obj.pk)

    async def delete_by_pk(self, pk: str):
        return await models.Vulnerability.delete(pk)

    async def delete_by_pks(self, pks: list[str]):
        model_pks = [models.Vulnerability.make_primary_key(pk) for pk in pks]
        if len(model_pks) == 0:
            return -1

        db = models.Vulnerability.db()
        return await db.delete(*model_pks)

    async def all_pks(self):
        return await models.Vulnerability.all_pks()


vulnerability = CRUDVulnerability()
