import io
import os
import tempfile
import zipfile
from pathlib import Path

import requests
from loguru import logger
from pydantic import ValidationError

from mihama import models
from mihama.core import settings


class Bucket:
    def __init__(
        self,
        base_url: str = settings.OSV_BUCKET_BASE_URL,
        timeout: int = settings.OSV_BUCKET_DOWNLOAD_TIMEOUT,
    ):
        self.base_url = base_url
        self.timeout = timeout

    def _url_for(self, path: str) -> str:
        return self.base_url + path

    def download_by_ecosystem(self, ecosystem: str, *, destination: str):
        if not os.path.isdir(destination):
            raise ValueError(f"{destination} is not a directory")

        url = self._url_for(f"/{ecosystem}/all.zip")
        res = requests.get(url, timeout=self.timeout)
        res.raise_for_status()

        with zipfile.ZipFile(io.BytesIO(res.content)) as zip:
            zip.extractall(destination)


class VulnerabilityFactory:
    @staticmethod
    def by_ecosystem(ecosystem: str) -> list[models.Vulnerability]:
        if ecosystem not in settings.OSV_ECOSYSTEMS:
            raise ValueError(f"{ecosystem} is not supported")

        bucket = Bucket()
        with tempfile.TemporaryDirectory() as destination:
            bucket.download_by_ecosystem(ecosystem, destination=destination)
            return VulnerabilityFactory.from_directory(destination)

    @staticmethod
    def from_directory(
        directory: str, *, raise_validation_error: bool = False
    ) -> list[models.Vulnerability]:
        if not os.path.isdir(directory):
            raise ValueError(f"{directory} is not a directory")

        vulnerabilities: list[models.Vulnerability] = []
        for p in Path(directory).glob("*.json"):
            try:
                vulnerabilities.append(models.Vulnerability.parse_file(p))
            except ValidationError as e:
                logger.error(f"{p} does not follow the OSV schema: {e}")

                if raise_validation_error:
                    raise e

        return vulnerabilities
