import pytest
from elasticsearch import AsyncElasticsearch

from mihama import crud, schemas


@pytest.mark.asyncio()
@pytest.mark.usefixtures("_setup_vulns")
async def test_get(vulns: list[schemas.Vulnerability], es: AsyncElasticsearch):
    for v in vulns:
        assert await crud.vulnerability.get(es, v.id) is not None


@pytest.fixture()
def purls(vulns: list[schemas.Vulnerability]):
    purls: set[str] = set()
    for v in vulns:
        for a in v.affected:
            if a.package_purl is not None:
                purls.add(a.package_purl)

    return purls


@pytest.mark.asyncio()
@pytest.mark.usefixtures("_setup_vulns")
async def test_search_by_package_purl(purls: set[str], es: AsyncElasticsearch):
    for purl in purls:
        vulnerabilities = await crud.vulnerability.search_by_package(
            es, schemas.QueryPackage(purl=purl)
        )
        assert len(vulnerabilities) > 0


@pytest.fixture()
def package_names(vulns: list[schemas.Vulnerability]):
    names: set[str] = set()
    for v in vulns:
        for a in v.affected:
            if a.package_name is not None:
                names.add(a.package_name)

    return names


@pytest.mark.asyncio()
@pytest.mark.usefixtures("_setup_vulns")
async def test_search_by_package_name(package_names: set[str], es: AsyncElasticsearch):
    for name in package_names:
        vulnerabilities = await crud.vulnerability.search_by_package(
            es, schemas.QueryPackage(name=name)
        )
        assert len(vulnerabilities) > 0
